openapi: 3.0.1
info:
  title: EmployeeEFCrud
  version: '1.0'
servers: 
  - url: "https://localhost:7217/"
paths:
  /api/Auth/register:
    post:
      tags:
        - Auth
      parameters:
        - name: role
          in: query
          style: form
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Userdto'
          text/json:
            schema:
              $ref: '#/components/schemas/Userdto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Userdto'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/Auth/login:
    post:
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Userdto'
          text/json:
            schema:
              $ref: '#/components/schemas/Userdto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Userdto'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/Employees:
    get:
      tags:
        - Employees
      parameters:
        - name: name
          in: query
          style: form
          schema:
            type: string
        - name: role
          in: query
          style: form
          schema:
            $ref: '#/components/schemas/UserRoles'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - oauth2: []
    post:
      tags:
        - Employees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
          text/json:
            schema:
              $ref: '#/components/schemas/Employee'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Employee'
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
            text/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - oauth2: []
  /api/Employees/{id}:
    get:
      tags:
        - Employees
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Employee'
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
            text/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - oauth2: []
    put:
      tags:
        - Employees
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
          text/json:
            schema:
              $ref: '#/components/schemas/Employee'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - oauth2: []
    delete:
      tags:
        - Employees
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - oauth2: []
  /api/Features/{id}:
    delete:
      tags:
        - Features
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: integer
            format: int32
        - name: isdeleted
          in: query
          style: form
          schema:
            type: boolean
        - name: isactive
          in: query
          style: form
          schema:
            type: boolean
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - oauth2: []
    put:
      tags:
        - Features
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: integer
            format: int32
        - name: isman
          in: query
          style: form
          schema:
            type: boolean
        - name: issup
          in: query
          style: form
          schema:
            type: boolean
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - oauth2: []
  /api/Roles/Show-roles:
    get:
      tags:
        - Roles
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - oauth2: []
  /api/Roles/Show-EmployeeRoles:
    get:
      tags:
        - Roles
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - oauth2: []
  /api/Roles/Add-roles:
    post:
      tags:
        - Roles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Roles'
          text/json:
            schema:
              $ref: '#/components/schemas/Roles'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Roles'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - oauth2: []
  /api/Roles/Add-EmployeeRole:
    post:
      tags:
        - Roles
      parameters:
        - name: name
          in: query
          style: form
          schema:
            type: string
        - name: role
          in: query
          style: form
          schema:
            $ref: '#/components/schemas/UserRoles'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - oauth2: []
  /api/Roles/Delete-EmpRole:
    delete:
      tags:
        - Roles
      parameters:
        - name: name
          in: query
          style: form
          schema:
            type: string
        - name: role
          in: query
          style: form
          schema:
            $ref: '#/components/schemas/UserRoles'
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - oauth2: []
components:
  schemas:
    Employee:
      type: object
      properties:
        employeeId:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        age:
          type: integer
          format: int32
        department:
          type: string
          nullable: true
        experience:
          type: integer
          format: int32
        bloodGroup:
          type: string
          nullable: true
        fatherName:
          type: string
          nullable: true
        isDeleted:
          type: boolean
        isActive:
          type: boolean
        dateOfCreated:
          type: string
          format: date-time
        dateOfUpdated:
          type: string
          format: date-time
        roles:
          type: string
          nullable: true
        isSupervisor:
          type: boolean
        isManager:
          type: boolean
      additionalProperties: false
    Roles:
      type: object
      properties:
        role_Id:
          type: integer
          format: int32
        roleName:
          type: string
          nullable: true
      additionalProperties: false
    User:
      type: object
      properties:
        userName:
          type: string
          nullable: true
        passwordHash:
          type: string
          nullable: true
        role:
          type: string
          nullable: true
      additionalProperties: false
    UserRoles:
      enum:
        - 1
        - 2
        - 3
        - 4
      type: integer
      format: int32
    Userdto:
      type: object
      properties:
        username:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
  securitySchemes:
    oauth2:
      type: apiKey
      name: Authorization
      in: header
